[gd_scene load_steps=5 format=3 uid="uid://iavgqv2buqyi"]

[ext_resource type="Texture2D" uid="uid://2qd7j22iy2d1" path="res://assets/entities/turret/turret_base.png" id="1_dx7f5"]
[ext_resource type="PackedScene" uid="uid://dysjyicry3juk" path="res://entities/properties/health.tscn" id="2_1o3x6"]
[ext_resource type="PackedScene" uid="uid://daqjxw76lqc0y" path="res://entities/ai/turret/turret_top.tscn" id="2_rv5vn"]

[sub_resource type="GDScript" id="GDScript_rrexp"]
script/source = "extends StaticBody2D

signal fire_at_enemy_signal

@export var aiming_speed = PI
@export var aiming_range = 300.0

@onready var turret_top: Node2D = $TurretTop
@onready var front_facing_marker: Marker2D = $FrontFacingMarker
@onready var fire_delay_timer: Timer = $FireDelayTimer
@onready var fire_rate_timer: Timer = $FireRateTimer
@onready var turret_base: Sprite2D = $TurretBase

var type: String = 'turret'
var is_player_controlled: bool = false
var is_entity_destroyed: bool = false

var _is_target_aquired = false
var _facing_target_position: Vector2

func get_type():
	return self.type

func get_is_entity_destroyed():
	return is_entity_destroyed

func get_is_player_controlled():
	return self.is_player_controlled

func hit(damage: int):
	$Health.decrease_health(damage) 

func _physics_process(delta):
	if is_entity_destroyed:
		fire_delay_timer.stop()
		fire_rate_timer.stop()
		return
	if turret_top && turret_top.has_method('get_turret_front_marker_position'):
		_facing_target_position = _aquire_valid_target()
		_is_target_aquired = _facing_target_position != front_facing_marker.global_position
		_rotate_to(turret_top,  _facing_target_position, delta, aiming_speed)

func _aquire_valid_target():
	var space_state = get_world_2d().direct_space_state
	var turret_facing_position = turret_top.get_turret_front_marker_position()
	if turret_facing_position:
		var query = PhysicsRayQueryParameters2D.create(turret_facing_position, _facing_target_position, 1)
		var result = space_state.intersect_ray(query)
		if result && result['collider']:
			var result_collider: Object = result.collider
			if result_collider.has_method('get_is_player_controlled') && result_collider.get_is_player_controlled() == true:
				_set_is_target_aquired(true)
				return _facing_target_position
	_set_is_target_aquired(false)
	return front_facing_marker.global_position
	
func _set_is_target_aquired(is_target_aquired: bool):
	if is_target_aquired != _is_target_aquired:
		_is_target_aquired = is_target_aquired
		if !_is_target_aquired:
			fire_rate_timer.stop()
			return
		fire_delay_timer.start()
	

func _on_health_entity_taken_damage():
	pass 

func _rotate_to(node: Node, target: Vector2, delta: float, speed: float):
	var vector = target - node.global_position
	var angle = vector.angle()
	var r = node.global_rotation
	var angle_delta = aiming_speed * delta
	angle = lerp_angle(r, angle, 1.0)
	angle = clamp(angle, r - angle_delta, r + angle_delta)
	node.set_global_rotation(angle)



func _get_closest_target(pc_entities: PackedVector2Array):
	var coordinate_distances: Array = []
	var facing_target = front_facing_marker.global_position
	if pc_entities.size():
		for vector in pc_entities:
			var distance = vector.direction_to(global_position)
			if distance:
				coordinate_distances.append(vector.distance_to(global_position))
	if coordinate_distances.size():
		var min_coordinate_distance = coordinate_distances.min()
		var min_coordinate_index = coordinate_distances.find(min_coordinate_distance)
		if min_coordinate_distance < aiming_range:
			var aquired_target = pc_entities[min_coordinate_index]
			facing_target = aquired_target
	return facing_target
	

func _on_ai_data_collector_pc_entity_positions(pc_entities: PackedVector2Array):
	_facing_target_position = _get_closest_target(pc_entities)
	pass
	

func _on_health_entity_death():
	turret_base.set_modulate(Color(0.41,0.41,0.41,1))
	turret_top.set_modulate(Color(0.41,0.41,0.41,1))
	self.is_entity_destroyed = true
	

func _on_fire_delay_timeout():
	fire_rate_timer.start()

func _on_fire_rate_timer_timeout():
	fire_at_enemy_signal.emit()
"

[node name="EntityAiTurret" type="StaticBody2D"]
position = Vector2(564, 306)
script = SubResource("GDScript_rrexp")

[node name="FrontFacingMarker" type="Marker2D" parent="."]
position = Vector2(29, 0)
rotation = -1.57079
scale = Vector2(0.131017, 0.131017)

[node name="TurretCollision" type="CollisionPolygon2D" parent="."]
position = Vector2(-20, -20)
polygon = PackedVector2Array(0, 0, 40, 0, 40, 40, 0, 40)

[node name="TurretBase" type="Sprite2D" parent="."]
position = Vector2(-1.14441e-05, 1.28746e-05)
rotation = -1.57079
scale = Vector2(0.124064, 0.124064)
texture = ExtResource("1_dx7f5")
offset = Vector2(-5.04102, 54.4902)

[node name="TurretTop" parent="." instance=ExtResource("2_rv5vn")]
z_index = 2

[node name="Health" parent="." instance=ExtResource("2_1o3x6")]
max_health = 5

[node name="FireDelayTimer" type="Timer" parent="."]
wait_time = 0.8
one_shot = true

[node name="FireRateTimer" type="Timer" parent="."]
wait_time = 0.4

[connection signal="fire_at_enemy_signal" from="." to="TurretTop" method="fire_weaponary"]
[connection signal="entity_death" from="Health" to="." method="_on_health_entity_death"]
[connection signal="entity_taken_damage" from="Health" to="." method="_on_health_entity_taken_damage"]
[connection signal="timeout" from="FireDelayTimer" to="." method="_on_fire_delay_timeout"]
[connection signal="timeout" from="FireRateTimer" to="." method="_on_fire_rate_timer_timeout"]
