[gd_scene load_steps=6 format=3 uid="uid://jrqogsnwupmq"]

[ext_resource type="PackedScene" uid="uid://ccfb8qndisdmh" path="res://entities/pc/mech/mech_top.tscn" id="1_7egov"]
[ext_resource type="PackedScene" uid="uid://dysjyicry3juk" path="res://entities/properties/health.tscn" id="2_hcl31"]
[ext_resource type="PackedScene" uid="uid://6hwwc8f8filw" path="res://entities/pc/mech/mech_base.tscn" id="2_pmist"]

[sub_resource type="GDScript" id="GDScript_gt15b"]
script/source = "extends CharacterBody2D

signal shoot_cannon

@export var movement_speed: float = 200
@export var aiming_speed: float = 3.1

@onready var rect = $CollisionShape2D.shape.get_rect()
@onready var mech_base = $MechBase
@onready var mech_top: Node2D = $MechTop
@onready var navigation_agent: NavigationAgent2D = $NavigationAgent2D

var type: String = 'mech'
var is_player_controlled: bool = true
var is_entity_destroyed: bool = false
var movement_target_position: Vector2;

var _face_target_direction: Vector2;
var _is_manually_aiming: bool = false

func get_is_entity_destroyed() -> bool:
	return self.is_entity_destroyed

func get_current_destination() -> Vector2:
	if global_position.distance_to(movement_target_position) < rect.size.x * 0.2:
		return self.global_position
	return self.movement_target_position

func get_type() -> String:
	return self.type

func get_is_player_controlled() -> bool:
	return self.is_player_controlled

func _ready() -> void:
	if movement_speed == 0:
		movement_speed = 200

func _process(_delta) -> void:
	if is_entity_destroyed:
		return

func _physics_process(delta) -> void:
	if is_entity_destroyed:
		mech_base.pause_walking_animation()
		return
	var collision = move_and_collide(velocity * delta)
	_rotate_to(self, movement_target_position, delta, movement_speed * 0.03)
	if movement_target_position && global_position.distance_to(movement_target_position) > 10:
		mech_base.play_walking_animation()
	if _is_manually_aiming != true:
		_face_target_direction = movement_target_position
	_rotate_to($MechTop, _face_target_direction, delta, aiming_speed)
	if collision || global_position.distance_to(movement_target_position) < rect.size.x * 0.2:
		if collision && collision.get_collider().has_method('_goto_condition_met'):
			collision.get_collider()._goto_condition_met()
		mech_base.pause_walking_animation()
		velocity = Vector2(0, 0)

func _rotate_to(node: Node, target: Vector2, delta: float, speed: float) -> void:
	var vector = target - node.global_position
	var angle = vector.angle()
	var r = node.global_rotation
	var angle_delta = speed * delta
	angle = lerp_angle(r, angle, 1.0)
	angle = clamp(angle, r - angle_delta, r + angle_delta)
	node.set_global_rotation(angle)

func _on_map_01_mouse_click_movement(movement_target: Vector2) -> void:
	movement_target_position = movement_target
	var direction = (movement_target - global_position).normalized()
	velocity = direction * movement_speed

func on_move_command(movement_target:Vector2):
	movement_target_position = movement_target
	var direction = (movement_target - global_position).normalized()
	velocity = direction * movement_speed

func fire_weaponary() -> void:
	shoot_cannon.emit()
	$ManualAimDisengage.start()

func _on_health_entity_death() -> void:
	mech_top.set_modulate(Color(0.41,0.41,0.41,1))
	mech_base.set_modulate(Color(0.41,0.41,0.41,1))
	self.is_entity_destroyed = true
	

func hit(damage: int) -> void:
	$Health.decrease_health(damage)

func _on_map_01_space_damage() -> void:
	fire_weaponary()

func _on_map_01_mouse_click_shoot(face_target: Vector2) -> void:
	_is_manually_aiming = true
	_face_target_direction = face_target
	$ManualAimDisengage.start()

func _on_manual_aim_disengage_timeout() -> void:
	_face_target_direction = movement_target_position
	_is_manually_aiming = false


func _on_map_01_plot_path():
	print(get_global_mouse_position())
	navigation_agent.target_position = get_global_mouse_position()
	print('anything?', navigation_agent.get_final_position())
	print(navigation_agent.get_current_navigation_path());
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_tghwv"]
size = Vector2(62, 30)

[node name="EntityPcMech" type="CharacterBody2D"]
position = Vector2(564, 309)
slide_on_ceiling = false
script = SubResource("GDScript_gt15b")

[node name="MechTop" parent="." instance=ExtResource("1_7egov")]

[node name="MechBase" parent="." instance=ExtResource("2_pmist")]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(3, 7)
rotation = 1.57079
shape = SubResource("RectangleShape2D_tghwv")

[node name="Health" parent="." instance=ExtResource("2_hcl31")]

[node name="ManualAimDisengage" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
path_postprocessing = 1
radius = 82.03
debug_enabled = true

[connection signal="shoot_cannon" from="." to="MechTop" method="_on_entity_pc_mech_shoot_cannon"]
[connection signal="entity_death" from="Health" to="." method="_on_health_entity_death"]
[connection signal="timeout" from="ManualAimDisengage" to="." method="_on_manual_aim_disengage_timeout"]
