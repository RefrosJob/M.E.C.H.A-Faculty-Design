[gd_scene load_steps=6 format=3 uid="uid://jrqogsnwupmq"]

[ext_resource type="PackedScene" uid="uid://ccfb8qndisdmh" path="res://entities/pc/mech/mech_top.tscn" id="1_7egov"]
[ext_resource type="PackedScene" uid="uid://dysjyicry3juk" path="res://entities/properties/health.tscn" id="2_hcl31"]
[ext_resource type="PackedScene" uid="uid://6hwwc8f8filw" path="res://entities/pc/mech/mech_base.tscn" id="2_pmist"]

[sub_resource type="GDScript" id="GDScript_gt15b"]
script/source = "extends CharacterBody2D

@export var movement_speed: float = 200
@export var aiming_speed: float = PI

@onready var rect = $CollisionShape2D.shape.get_rect()
@onready var autocannon = $AutoCannon
@onready var mech_base = $MechBase

var type: String = 'mech'

var _is_player_controlled: bool = true
var _movement_target_position: Vector2;
var _face_target_direction: Vector2;
var _is_manually_aiming: bool = false

signal shoot_cannon

func _ready():
	if movement_speed == 0:
		movement_speed = 300
	pass
	
func _physics_process(delta):
	var collision = move_and_collide(velocity * delta)
	rotate_to(self, _movement_target_position, delta)
	mech_base.play_walking_animation()
	if collision || global_position.distance_to(_movement_target_position) < rect.size.x * 0.2:
		mech_base.pause_walking_animation()
		velocity = Vector2(0, 0)
	if (_is_manually_aiming):
		face($MechTop, _face_target_direction, delta)
	else:
		face($MechTop, _movement_target_position, delta)
	
	
func face(node, target, delta):
	var vector = target - node.global_position
	var angle = vector.angle()
	var r = node.global_rotation
	var angle_delta = aiming_speed * delta
	angle = lerp_angle(r, angle, 1.0)
	angle = clamp(angle, r - angle_delta, r + angle_delta)
	node.set_global_rotation(angle)
	pass
	

func rotate_to(node, target, delta):
	var direction = (target - global_position)
	var angleTo = node.transform.x.angle_to(direction)
	var rotation_value = sign(angleTo) * min(delta * (movement_speed * 0.03), abs(angleTo))
	node.rotate(rotation_value)
	
func get_current_destination():
	if global_position.distance_to(_movement_target_position) < rect.size.x * 0.2:
		return global_position
	return _movement_target_position

func _on_map_01_mouse_click_movement(movement_target: Vector2):
	_movement_target_position = movement_target
	var direction = (movement_target - global_position).normalized()
	velocity = direction * movement_speed
	pass 
	
func fire_weaponary():
	shoot_cannon.emit($MechTop.global_rotation)
	$ManualAimDisengage.start()

func get_type():
	return self.type
	
func get_is_player_controlled():
	return self.is_player_controlled

func _on_health_entity_death():
	self.queue_free()

func hit(damage: int):
	$Health.decrease_health(damage)

func _on_map_01_space_damage():
	fire_weaponary()


func _on_map_01_mouse_click_shoot(face_target: Vector2):
	_is_manually_aiming = true
	_face_target_direction = face_target
	$ManualAimDisengage.start()
	pass # Replace with function body.


func _on_manual_aim_disengage_timeout():
	_face_target_direction = _movement_target_position
	_is_manually_aiming = false
	pass # Replace with function body.
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_tghwv"]
size = Vector2(66, 40)

[node name="EntityPcMech" type="CharacterBody2D"]
position = Vector2(564, 309)
slide_on_ceiling = false
script = SubResource("GDScript_gt15b")

[node name="MechTop" parent="." instance=ExtResource("1_7egov")]

[node name="MechBase" parent="." instance=ExtResource("2_pmist")]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(8, 5.99997)
rotation = 1.57079
shape = SubResource("RectangleShape2D_tghwv")

[node name="Health" parent="." instance=ExtResource("2_hcl31")]

[node name="ManualAimDisengage" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[connection signal="shoot_cannon" from="." to="MechTop" method="_on_entity_pc_mech_shoot_cannon"]
[connection signal="entity_death" from="Health" to="." method="_on_health_entity_death"]
[connection signal="timeout" from="ManualAimDisengage" to="." method="_on_manual_aim_disengage_timeout"]
